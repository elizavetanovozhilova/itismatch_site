import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import '../styles/matches.css'
import defaultAvatar from '../assets/Itismatch.png'

function Matches() {
  const [matches, setMatches] = useState([])
  const [selectedUser, setSelectedUser] = useState(null) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [showPopup, setShowPopup] = useState(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞

  const navigate = useNavigate()
  const userId = localStorage.getItem('user_id')

  useEffect(() => {
    if (!userId) return

    fetch('https://lzznm.app.n8n.cloud/webhook/eb5fdb37-1fb8-4a17-bbe7-1098a592ec3c', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: userId })
    })
    .then(res => res.json())
    .then(setMatches)
  }, [userId])

  const handleLike = async (toUserId, liked) => {
    await fetch('https://lzznm.app.n8n.cloud/webhook/ae5215a8-f087-452c-b133-0f8642fd3c9f', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        from_user_id: userId,
        to_user_id: toUserId,
        liked
      })
    })
  
    if (liked) {
      setMatches(prev =>
        prev.map(u =>
          u.user_id === toUserId ? { ...u, mutual: true } : u
        )
      )
    } else {
      setMatches(prev => prev.filter(u => u.user_id !== toUserId))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const openUserPopup = (user) => {
    setSelectedUser(user)
    setShowPopup(true)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞
  const closePopup = () => {
    setShowPopup(false)
  }

  return (
    <div className="matches-container">
      <h2>–ú–æ–∏ –º—ç—Ç—á–∏</h2>
      {matches.length > 0 ? matches.map(user => (
        <div key={user.user_id} className="card" onClick={() => openUserPopup(user)}>
            <h3>{user.name}</h3>
            <p>{user.description}</p>
            {user.mutual ? (
            <p><strong>–°–æ—Ü—Å–µ—Ç–∏:</strong> <a className="link" href={user.social_link} target="_blank" rel="noopener noreferrer">{user.social_link}</a></p>
            ) : (
            <div style={{ display: 'flex', gap: '1rem' }}>
                <button onClick={(e) => {
                  e.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
                  handleLike(user.user_id, true)
                }}>üëç</button>
                <button onClick={(e) => {
                  e.stopPropagation() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
                  handleLike(user.user_id, false)
                }}>üëé</button>
            </div>
            )}
        </div>
      )) : <p>–ü–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π</p>}

      {/* –ü–æ–ø–∞–ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      {showPopup && selectedUser && (
        <div className="popup-overlay" onClick={closePopup}>
          <div className="popup-content" onClick={(e) => e.stopPropagation()}>
            <button className="close-popup" onClick={closePopup}>√ó</button>
            <h3>{selectedUser.name}</h3>
            <div className="avatar-container">
              <img
                src={
                  selectedUser.photo
                    ? (selectedUser.photo.startsWith('data:') ? selectedUser.photo : `https://—Ç–≤–æ—è_—Å—Å—ã–ª–∫–∞_–∫_—Ö—Ä–∞–Ω–µ–Ω–∏—é/${selectedUser.photo}`)
                    : defaultAvatar
                }
                alt="–ê–≤–∞—Ç–∞—Ä"
                className="avatar-image"
              />
            </div>
            <p><strong>–ì—Ä—É–ø–ø–∞:</strong> {selectedUser.group_name || '‚Äî'}</p>
            <p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {selectedUser.age || '‚Äî'}</p>
            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {selectedUser.description || '‚Äî'}</p>
            <p><strong>–¶–µ–ª—å:</strong> {selectedUser.goal || '‚Äî'}</p>
            <p><strong>–ü–æ–ª:</strong> {selectedUser.gender === 'M' ? '–ú—É–∂—Å–∫–æ–π' : selectedUser.gender === 'F' ? '–ñ–µ–Ω—Å–∫–∏–π' : '‚Äî'}</p>
            <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> {selectedUser.specialty || '‚Äî'}</p>
            <p><strong>–°–æ—Ü—Å–µ—Ç—å:</strong>{' '}
              {selectedUser.social_link
                ? <a href={`https://t.me/${selectedUser.social_link.replace('@', '')}`} className="link" target="_blank" rel="noopener noreferrer">
                    {selectedUser.social_link}
                  </a>
                : '‚Äî'}
            </p>
          </div>
        </div>
      )}

      <button onClick={() => navigate('/')}>‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  )
}

export default Matches